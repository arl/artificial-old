// +build ignore

package main

// This program generates lab_rgba_lut.go, a lookup table for fast conversion
// from Lab to RGB color space. Invoke it as
//	go run gen.go

import (
	"bytes"
	"flag"
	"fmt"
	"go/format"
	"io"
	"io/ioutil"
	"log"

	colorful "github.com/lucasb-eyer/go-colorful"
)

var filename = flag.String("output", "lab_rgba_lut.go", "output file name")
var pkgname = flag.String("pkgname", "color", "package name")
var nsteps = flag.Int("nsteps", 16, "number of steps, color points per component")

func main() {
	flag.Parse()

	var buf bytes.Buffer

	fmt.Fprintf(&buf, "// Code generated by go run gen.go -output %s -pkgname %s -nsteps %v; DO NOT EDIT.", *filename, *pkgname, *nsteps)
	fmt.Fprintln(&buf)
	fmt.Fprintf(&buf, "package %s\n", *pkgname)
	fmt.Fprintln(&buf)
	fmt.Fprintln(&buf, `import "image/color"`)
	fmt.Fprintln(&buf)
	log.Println("generating/writing lookup table")
	printLab2RGB(&buf)

	log.Println("formatting source")
	data, err := format.Source(buf.Bytes())
	if err != nil {
		log.Fatalln("error formatting source: ", err, string(buf.Bytes()))
	}
	log.Println("writing output")
	err = ioutil.WriteFile(*filename, data, 0644)
	if err != nil {
		log.Fatalln("error writing output: ", err)
	}
}

func printLab2RGB(w io.Writer) {
	fmt.Fprintln(w, "// Lab2RGB is a lookup table converting values from CIE L*a*b colorspace to their")
	fmt.Fprintln(w, "// equivalent in RGBA")
	fmt.Fprintf(w, "const Lab2RGBNumSteps = %v;\n", *nsteps)
	fmt.Fprintf(w, "var Lab2RGB = [%v][%v][%v]color.RGBA{\n", *nsteps, *nsteps, *nsteps)

	lstep := (1.0 - 0.0) / (float64(*nsteps) - 1)
	abstep := (1.0 - -1.0) / (float64(*nsteps) - 1)

	for lidx := 0; lidx < *nsteps; lidx++ {
		log.Printf("step %v/%v\n", lidx, *nsteps)
		fmt.Fprintln(w, "{")
		l := float64(lidx) * lstep
		for aidx := 0; aidx < *nsteps; aidx++ {
			fmt.Fprintln(w, "{")
			a := float64(aidx)*abstep - 1.0
			for bidx := 0; bidx < *nsteps; bidx++ {
				b := float64(bidx)*abstep - 1.0
				R, G, B := colorful.Lab(l, a, b).Clamped().RGB255()
				fmt.Fprintf(w, "color.RGBA{%v, %v, %v, 255},\n", R, G, B)
			}
			fmt.Fprintln(w, "},")
		}
		fmt.Fprintln(w, "},")
	}
	fmt.Fprintln(w, "}")
	fmt.Fprintln(w)
}
